// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DataSource {
  DORMSPAM
  MANUAL_INPUT
}

enum RequestStatus {
  PENDING
  ACCEPTED
  IGNORED
}

model Event {
  id          Int        @id @default(autoincrement())
  source      DataSource
  // For dormspam, this is the email that the event was scraped from.
  fromEmail   Email?     @relation(fields: [fromEmailId], references: [messageId])
  fromEmailId String
  text        String

  title     String
  organizer String
  date      DateTime
  location  String
  duration  Int      @default(60)

  liked EmailSender[]

  tags            Tag[]
  tagsProcessedBy String?
}

model Tag {
  id       Int    @id @default(autoincrement())
  name     String @unique
  category String
  icon     String
  color    String

  events Event[]
}

model Email {
  // The account used to scrape the email, i.e., macy404@mit.edu
  scrapedBy String
  // The uid of this email in the account's mailbox.
  uid       Int

  messageId   String  @id
  inReplyTo   Email?  @relation("InReplyTo", fields: [inReplyToId], references: [messageId])
  inReplyToId String?
  replies     Email[] @relation("InReplyTo")

  receivedAt  DateTime
  sender      EmailSender @relation(fields: [senderEmail], references: [email])
  senderEmail String
  subject     String
  body        String

  processedBody String?

  // The name of the model-prompt used to process this event. E.g. "GPT3.5-prompt-0514"
  // In this way when we get better models we can reprocess the same events with the new model.
  modelName String?

  event Event[]

  @@unique([scrapedBy, uid])
}

// Also record emails we looked at but ignored. This prevents us from looking at them again.
// Stores less information for privacy reasons.
model IgnoredEmail {
  scrapedBy  String
  uid        Int
  receivedAt DateTime

  @@unique([scrapedBy, uid])
}

// Actually user.
model EmailSender {
  email  String  @id
  name   String?
  emails Email[]
  likes  Event[]

  subscribed Boolean @default(false)

  // Friend relations
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  friendships1     Friendship[]    @relation("UserFriends1")
  friendships2     Friendship[]    @relation("UserFriends2")
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  fromUser  EmailSender @relation("SentRequests", fields: [fromEmail], references: [email])
  fromEmail String
  toUser    EmailSender @relation("ReceivedRequests", fields: [toEmail], references: [email])
  toEmail   String
  status    RequestStatus
  createdAt DateTime @default(now())

  @@unique([fromEmail, toEmail])
  @@index([fromEmail])
  @@index([toEmail])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  user1     EmailSender @relation("UserFriends1", fields: [user1Email], references: [email])
  user1Email String
  user2     EmailSender @relation("UserFriends2", fields: [user2Email], references: [email])
  user2Email String
  createdAt DateTime @default(now())

  @@unique([user1Email, user2Email])
  @@index([user1Email])
  @@index([user2Email])
}
